* My Emacs configuration file
  I decided to use literate programming for my configuration file, mainly spired by [[http://sachachua.com/][Sacha Chua]], since it's easier to read an understand what's going on in my conf and what kind of packages I'm using and I'm trying to learn.
** Shortcuts quickref
| Key   | Description          |
|-------+----------------------|
| <F2>  | Org capture          |
| <F5>  | Magit Status         |
| <F6>  | List of my org files |
| <F10> | Prodigy              |
| <F12> | Org Pomodoro         |
|       |                      |
* Basic configuration

First I have to add ~/.emacs.d to the load path in order to easily load additional .el files
#+begin_src emacs-lisp :tangle yes
  (add-to-list 'load-path user-emacs-directory) ;; ~/.emacs.d
#+end_src

I also gatta check if the current environment is a mac computer.
#+begin_src emacs-lisp :tangle yes
  (setq is-mac (equal system-type 'darwin))
#+end_src

I don't like to type the whole "yes" or "no" words, so I better like just "y" or "n".

#+begin_src emacs-lisp :tangle yes
  (fset 'yes-or-no-p 'y-or-n-p)
#+end_src

Also I like to replace the selected region.

#+begin_src emacs-lisp :tangle yes
  (pending-delete-mode t)
#+end_src

I'm using ido mode for searching files, buffers, etc.

#+begin_src emacs-lisp :tangle yes
  (setq ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (ido-mode 1)
#+end_src

Clear spaces every time I save
#+begin_src emacs-lisp :tangle yes
  (add-hook 'before-save-hook 'whitespace-cleanup)
#+end_src

I'm using the adobe source code font. I have to find a way to not exec this code if the font is not available.

#+begin_src emacs-lisp :tangle yes
  (set-default-font "-adobe-Source Code Pro-normal-normal-normal-*-13-*-*-*-m-0-iso10646-1")
#+end_src

I want my emacs frame maximized allways please!!!

#+begin_src emacs-lisp :tangle yes
  (when is-mac
    (add-hook 'emacs-startup-hook 'toggle-frame-maximized))
  ;; Should I use toggle-frame-fullscreen intead?
#+end_src

#+begin_src emacs-lisp :tangle yes
  ;; May be this is not going to work. I need to debugg it by deleting cask packages and so for
;;  (require 'bind-key)
#+end_src

*** TODO move this thing

#+begin_src emacs-lisp :tangle yes
  (defun switch-to-previous-buffer ()
    (interactive)
    (switch-to-buffer (other-buffer (current-buffer) 1)))

  (global-set-key (kbd "C-<tab>") 'switch-to-previous-buffer)

  ;; This for remembering to use C-/ for undoing stuff -- TODO move it to keybindings
  (global-unset-key (kbd "C-x u"))
  (global-set-key (kbd "C-x u") (lambda ()
                                  (interactive)
                                  ;; find a way to show the visual bell please!
                                  (message "You better use C-/ for undoing stuff")
                                  ))
#+end_src

** Getting rid of the anoying stuff
I disable the stupid bell sound.
#+begin_src emacs-lisp :tangle yes
  (setq visible-bell t)
#+end_src

And I only want to be notified by errors
#+begin_src emacs-lisp :tangle yes
  (setq warning-minimum-level :error)
#+end_src

I don't need the default scratch buffer content, so I set it to nil
#+begin_src emacs-lisp :tangle yes
  (setq initial-scratch-message nil)
#+end_src

I recently discovered that you can actually change the scratch buffer mode

#+begin_src emacs-lisp :tangle yes
  (setq initial-major-mode 'org-mode)
#+end_src

Wait a minute... Could I make the scratch buffer 1 inmortal, and 2 to be my inbox?

I don't want to see the statup message(that's for newbies XD)
#+begin_src emacs-lisp :tangle yes
  (setq inhibit-startup-message t)
#+end_src

I get rid of the toolbar, scrollbar and menu bar
#+begin_src emacs-lisp :tangle yes
  (menu-bar-mode -1)

  (if (boundp 'tool-bar-mode)
      (tool-bar-mode -1))

  (if (boundp 'scroll-bar-mode)
      (scroll-bar-mode -1))
#+end_src

And I prefer not to have temp files in the same directory as the original file.
#+begin_src emacs-lisp :tangle yes
  (setq backup-directory-alist
        `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
        `((".*" ,temporary-file-directory t)))
#+end_src

** Configuration for OS X

#+begin_src emacs-lisp :tangle yes
(when is-mac
  ;; Set option to nil to enable extrange chars
  (setq mac-option-modifier nil)
  ;; Use control from Meta
  (setq ns-command-modifier (quote meta))
  ;; Set right option to control
  (setq mac-right-option-modifier 'control))
#+end_src

* Helper functions

This is a set of helper functions for an easier configuration.

#+begin_src emacs-lisp :tangle yes
  (defun add-to-path (dir)
    "Adds dir to the PATH environment variable"
    (setenv "PATH" (concat (format "%s:" dir) (getenv "PATH"))))

  ;; TODO change this function's name and doc it
  (defun load-file-if-exists (file-name)
    (let ((file-path (expand-file-name file-name user-emacs-directory)))
      (when (file-exists-p file-path)
        (load-file file-path))))
#+end_src

* Local environment setup
#+begin_src emacs-lisp :tangle yes
  (add-to-path "~/.cask/bin")
  (add-to-path "/Users/carlos/.nvm/versions/node/v5.0.0/bin/")
  (when is-mac
    (add-to-path "/usr/local/bin")
    (setq ispell-program-name "/usr/local/bin/ispell")
    (setq sql-mysql-program "/usr/local/bin/mysql"))
#+end_src

* Text editing
** A better set of killing tools
I never liked emacs's default kill line function, it's just weird how it works and how many keystrokes you need to kill a line for example.
I decided to write a set of replacement functions and rebind them with a *C-k* prefix.

*** TODO I think this is a good opportunity to write an entire emacs module

#+begin_src emacs-lisp :tangle yes
  (defun kill-entire-line ()
    ;; TODO(carlos): I think I can check if I'm at the beggining of line and may be rebind C-k for repeat last kill if so
    (interactive)
    (move-beginning-of-line nil)
    (kill-line 1))

  (defun kill-to-beggining-of-line ()
    (interactive)
    (kill-line 0))

  ;; TODO(carlos): use bind-key please
  (global-unset-key (kbd "C-k"))
  (global-unset-key (kbd "M-z"))
  (global-set-key (kbd "C-k C-k") 'kill-entire-line)
  (global-set-key (kbd "C-k C-e") 'kill-line)
  (global-set-key (kbd "C-k C-a") 'kill-to-beggining-of-line)
  (global-set-key (kbd "C-k z") 'zap-to-char)
#+end_src

* Cask
I'm using cask for managing my installed packages now :)
#+BEGIN_SRC emacs-lisp :tangle yes
  (require 'cask "~/.cask/cask.el")
  (cask-initialize)
#+END_SRC

* Org Mode

I had this configuration for using Google Drive but not sure if it's going to be my choice :(
#+begin_src emacs-lisp :tangle yes
  (setq google-drive-dir "~/Google Drive/")
  (setq org-capture-templates
        '(("i" "Inbox" entry (file (expand-file-name "org/inbox.org" google-drive-dir)  "Inbox")
           "* TODO %?\n"
           )
          ))
#+end_src

This is for enabling syntax highlighting in src blocks for org files
#+begin_src emacs-lisp :tangle yes
  (setq org-src-fontify-natively t)
#+end_src

Here I'm setting a global org prefix so I can access org stuff quickly.

#+begin_src emacs-lisp :tangle yes
  (global-unset-key (kbd "C-o"))
  (global-set-key (kbd "C-o c") 'org-capture)
#+end_src

In order to be able to move items to other files I need to set the `org-agenda-files` max level to 9

#+begin_src emacs-lisp :tangle yes
  (setq org-refile-targets (quote ((nil :maxlevel . 9)
                                   (org-agenda-files :maxlevel . 9))))
#+end_src

The next function is going to be used to select one of my most used org files

#+begin_src emacs-lisp :tangle yes
  (setq my-org-files-dir (file-name-as-directory "~/Google Drive/org"))
  (defun find-my-org-files ()
    (interactive)
    (find-file
     (expand-file-name
      (ivy-read "Choose a file:"
                (directory-files my-org-files-dir nil "org")
                )
      my-org-files-dir
      )
     )
    )
  (global-set-key (kbd "<f6>") 'find-my-org-files)
#+end_src

#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "<f12>") 'org-pomodoro)
#+end_src

* Evil Mode
Yes, now I'm a user of evil-mode.

I decided to switch to evil since it find it hard to pair with vim
users, and since I once was a vim user, I know it is not a bad editor
and it make more sense if I learn it again, so I'm going to be
efficient using both editors.

In order to enable evil-mode I got run the following code.

#+begin_src emacs-lisp :tangle yes
  ;; Basically we got to call the following function with a positive
  ;; argument
  (evil-mode 1)
#+end_src

* TODOS handling

In order to search for a TODO you should press

#+begin_src emacs-lisp :tangle yes
  (defun search-todos ()
    (interactive)
    (swiper "TODO")
    )

  (global-set-key (kbd "<f7>") 'search-todos)

#+end_src

* Common development settings
Subword-mode helps me when I need to navigate in cammel case like variable names
#+begin_src emacs-lisp :tangle yes
  (global-subword-mode)
#+end_src

I like to see the matching parentesis highlighted

#+begin_src emacs-lisp :tangle yes
  (show-paren-mode t)
#+end_src

And I have the line numbers enabled by default... May be not

#+begin_src emacs-lisp :tangle yes
  ;(add-hook 'find-file-hook (lambda () (linum-mode 1)))
  ;(global-linum-mode 1)
#+end_src

And the current line is highlighted

#+begin_src emacs-lisp :tangle yes
  (global-hl-line-mode)
#+end_src

I turn on eldoc in any elisp like mode

#+begin_src emacs-lisp :tangle yes
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'ielm-mode-hook 'turn-on-eldoc-mode)
#+end_src

Here I set the default indentation config

#+begin_src emacs-lisp :tangle yes
  (setq js2-basic-offset 2)
  (setq js2-bounce-indent-p nil)
  (setq js-indent-level 2
        indent-tabs-mode nil
        c-basic-offset 2)
  (setq css-indent-offset 2)
  (setq-default indent-tabs-mode nil)
  (setq indent-tabs-mode nil)
  (setq python-indent-offset 2)
#+end_src

* Auto complete

I'm using autocomplete but may be I'll try company in the future. I really don't know.
Meanwhile here is my configuration for autocomplete.

#+begin_src emacs-lisp :tangle yes
  ;; (require 'auto-complete-config)
  ;; (ac-config-default)
#+end_src

* Company mode

#+begin_src emacs-lisp :tangle yes
  (add-hook 'after-init-hook 'global-company-mode)
#+end_src

* Helm

I tryed smex and it's quite good but I think helm is much better for huge collections
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-x") 'helm-M-x)
#+end_src

* Yasnippet
#+begin_src emacs-lisp :tangle yes
  (yas-global-mode)
#+end_src

* Projectile
  In order to have projectile enabled globally I have to call it's gobal-mode function.
#+BEGIN_SRC emacs-lisp :tangle yes
  (projectile-global-mode)
  (setq projectile-completion-system 'helm)
  (helm-projectile-on)
  (setq projectile-indexing-method 'alien)
#+END_SRC

Since I need recentf-mode to use C-c p e I just set it up

#+begin_src emacs-lisp :tangle yes
  (recentf-mode 1)
#+end_src

* Ace Jump

I'm just setting the keybindng for ace jump. Should I do something else?

#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-j") 'ace-jump-mode)
#+end_src

* Ace isearch

#+begin_src emacs-lisp :tangle yes
  (global-ace-isearch-mode 1)
#+end_src

* Smartparens

So, I'm using smartparens because why not?. It helps me when I need to have pairs of characters like parentesis, brakets and than kind of stuff.

The only thing I'm configuring right now is a set of special characters for some mayor modes. For other modes I'm using the default configuration.

#+begin_src emacs-lisp :tangle yes
  (defun setup-smartparens ()
    (smartparens-global-mode 1)
    (sp-with-modes '(html-mode sgml-mode)
      (sp-local-pair "<" ">"))
    (sp-with-modes '(go-mode)
      (sp-local-pair "/*" "*/"))
    )

  (add-hook 'after-init-hook 'setup-smartparens)
#+end_src

* Magit

Right now I'm not using all the magit power :(

I just set a global keybinding than could change but I'm interested in making more awesome git stuff

#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "<f5>") 'magit-status)
  (setq magit-status-buffer-switch-function 'switch-to-buffer)
#+end_src

* Expand region

Ok, so I'm kinda using expand region but I need to figure out a way to remember to use it.
My current key binding seems to be ok but I can change it in the future.

#+begin_src emacs-lisp :tangle yes
  (require 'expand-region)
  (global-set-key (kbd "M-p") 'er/expand-region)
#+end_src

* Git Gutter Fringe

I found this really cool minor mode that shows file modifications from git status in the left margin.

It's super awesome and easy to configure

#+begin_src emacs-lisp :tangle yes
  (require 'git-gutter-fringe+)
  (global-git-gutter+-mode)
#+end_src

* Ace Window
Jumping from a window to another kinda sucks, so I'm using this package that makes it really fancy and easy.

First of all, I'm setting a dummy function to *C-x o*, so I'm being forced to use ace window. I neet to fix an issue with js2-mode, though
#+begin_src emacs-lisp :tangle yes
  (defun c-x-o-replace ()
    "Forces me to use ace-window"
    (interactive)
    (message "You better use M-j"))
  (global-unset-key (kbd "C-x o"))
  (global-set-key (kbd "C-x o") 'c-x-o-replace)
#+end_src

Then I setup ace window and I chose to use comfortable keys for dvorak layout
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "M-j") 'ace-window)
  (setq aw-keys '(?g ?c ?r ?h ?t ?n ?m ?w ?v))
#+end_src

Since js2-mode has it's own command attached to M-j, I need to remap it to ace-winbow

#+begin_src emacs-lisp :tangle yes
  (require 'js2-mode)
  (define-key js2-mode-map (kbd "M-j") 'ace-window)
  ;;(add-hook 'js2-mode-hook
  ;;          )
#+end_src

* Zencoding mode

#+begin_src emacs-lisp :tangle yes
  (add-hook 'sgml-mode-hook 'zencoding-mode)
#+end_src

* Js2 mode?

#+begin_src emacs-lisp :tangle yes
  ;; Not sure what this thing does
  (js2-imenu-extras-mode)
#+end_src

* js2-refactor

I'm actually trying this, it seems super cool but I need to get used to it

#+begin_src emacs-lisp :tangle yes
  ;; (require 'js2-refactor)
  ;; (add-hook 'js2-mode-hook #'js2-refactor-mode)
  ;; (js2r-add-keybindings-with-prefix "C-c C-m")
#+end_src

* Jsx-mode

#+begin_src emacs-lisp :tangle yes
  (setq jsx-indent-level 2)
#+end_src

* Web mode

#+begin_src emacs-lisp :tangle yes
  (add-hook 'web-mode-hook
            (lambda ()
              (setq web-mode-markup-indent-offset 2)
              (setq web-mode-css-indent-offset 2)
              (setq web-mode-code-indent-offset 2)))
#+end_src

* Flycheck
#+begin_src emacs-lisp :tangle yes
  ;; use web-mode for .jsx files
  ;(add-to-list 'auto-mode-alist '("\\.jsx$" . web-mode))

  ;; http://www.flycheck.org/manual/latest/index.html
  (require 'flycheck)

  ;; turn on flychecking globally
  (add-hook 'after-init-hook #'global-flycheck-mode)

  ;; disable jshint since we prefer eslint checking
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(javascript-jshint)))

  ;; use eslint with web-mode for jsx files
  (flycheck-add-mode 'javascript-eslint 'web-mode)

  ;; disable json-jsonlist checking for json files
  (setq-default flycheck-disabled-checkers
                (append flycheck-disabled-checkers
                        '(json-jsonlist)))
#+end_src

* Beacon
#+begin_src emacs-lisp :tangle yes
  (beacon-mode 1)
#+end_src
* Undo Tree
#+begin_src emacs-lisp :tangle yes
  (undo-tree-mode 1)
#+end_src

* Ibuffer
#+begin_src emacs-lisp :tangle yes
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+end_src

* Markdown
  #+begin_src emacs-lisp :tange yes
    (setq markdown-open-command "/usr/local/bin/mark")
  #+end_src
* File associations

#+begin_src emacs-lisp :tangle yes
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsx$" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.ctp$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))
  (add-to-list 'auto-mode-alist '("\\.module$" . php-mode))
  (add-to-list 'auto-mode-alist '("\\.install$" . php-mode))
#+end_src

* Keybindings

#+begin_src emacs-lisp :tangle yes
  ;; Should move to a different file: Taken from Magnars Sveen config
  (defun kill-region-or-backward-word ()
    (interactive)
    (if (region-active-p)
        (kill-region (region-beginning) (region-end))
      (backward-kill-word 1)))


  ;; GoTo line
  (global-set-key (kbd "C-x g") 'goto-line)

  ;; A more comfortable backspace
  (global-unset-key (kbd "C-h"))
  (global-set-key (kbd "C-h") 'backward-delete-char)
  (global-set-key (kbd "M-h") 'kill-region-or-backward-word)

  ;; New line and indent
  (global-set-key (kbd "RET") 'newline-and-indent)

  ;; Disable backspace, so I must use C-h
  (global-set-key (kbd "<backspace>") 'ignore)

  ;; A better M-x
  (global-set-key (kbd "C-x m") 'smex)
  (global-set-key (kbd "C-c m") 'smex)

  ;; Multi-term
  ;;(global-set-key (kbd "C-x t") 'multi-term-next) ;; May change it?
  ;; Eshell
  (global-set-key (kbd "C-x t") 'eshell)

  ;; Previeous window
  (global-set-key (kbd "C-x M-o") 'previous-multiframe-window)

  ;; Goto line
  (global-set-key (kbd "C-x g") 'goto-line)

  ;; Org-mode
  (global-set-key (kbd "<f2>") 'org-capture)

  ;; Prodigy
  ;;(bind-key "<f10>" 'prodigy)
  (global-set-key (kbd "<f10>") 'prodigy)

  ;; itunes
  ;; (global-set-key (kbd "<f6>") 'helm-itunes)
#+end_src

* Algunas notas sobre shortcuts
#+begin_src emacs-lisp :tangle yes
;; C-j ace-jump-mode

;; M-p expand-region
;; M-r no tan usual- se reemplaza por ace-jump-mode
;; M-o no se que tranza
;; M-i se usa para tabs
;; M-n no definida
;; M-s es un prefijo para no se que
;; M-q fill paragraph- formatea un parrafo. Es util para formatear comentarios de varias lineas
;; M-j ace-window
;; M-z Debes usarlo. Hace un kill hasta un caracter
#+end_src

* TODOS
** DONE Check how to make the lines not to be hidden when the screen is thinner than text.
 Emacs does that automatically. But not sure why it does not work in org mode
** TODO Check use-package to better manage packages
** DONE Check cask to better manage packages
** TODO Check the indentation setup please!!!
** DONE Check Paradox? :)
** TODO Cycle spacing
** DONE May be check eww [SUPER COOL]
** TODO Must use eww frequently {p my friend}
** TODO Cure mode? web development (scure ?)
** TODO Slime js must otro similar?
** DONE Must web-mode
** TODO Org-agregate :O org tbl agregate
** TODO Start doing snippets please!!!
** TODO Should use occur please!!!! M-s o (checar tambien M-s l y M-s u)
** TODO Should use "v" in dired mode please!!!!
** TODO Should I use <Enter> as another control? I think I must try
** TODO Can I get rid of Alfred's workflows by using emacs as a replacement for other apps?
** TODO Remember to use F1 after a keyboard prefix to get the entire list of commands
** TODO Remember to use C-x v to use some useful version controll commands
** TODO Must use multiple cursors
** TODO Use bind-key please!!
** TODO Use restclient please!!
** DONE Try git-blame
** TODO Enable rainbow-delimiters for all modes
** DONE M-j should be unmapped in js2-mode
** DONE Setup web-mode
** DONE Use occour to find all TODOS in a projectile project
** TODO Use sql-mysql please!!
** TODO Should use ibuffer please!!
** TODO Make a move(up/down) line/region
** TODO Delete to beginning of line please!!
** TODO Transient Multiline select mode C-c s ?
** TODO A copy line please
** TODO M-r could be used for replace
** TODO M-o no lo voy a usar rebind please tal vez para copy?
** TODO M-i no lo voy a usar rebind
** TODO M-z esta libre ahora
** TODO Disable transient-mark mode again. should fix the stupid comment thing
** TODO Jump to next-prev git changes
** TODO I would like to use help please!
