* Emacs Config

/This document follows the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] paradigm to setup Emacs according to my needs./

  [[./img/screenshot1.png]]

** Package management
   Setup package sources as described in [[https://melpa.org/#/getting-started][MELPA's Getting Started Guide]].
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (let* ((no-ssl (and (memq system-type '(windows-nt ms-dos))
                         (not (gnutls-available-p))))
            (proto (if no-ssl "http" "https")))
       ;; Comment/uncomment these two lines to enable/disable MELPA and MELPA Stable as desired
       (add-to-list 'package-archives (cons "melpa" (concat proto "://melpa.org/packages/")) t)
       ;;(add-to-list 'package-archives (cons "melpa-stable" (concat proto "://stable.melpa.org/packages/")) t)
       (when (< emacs-major-version 24)
         ;; For important compatibility libraries like cl-lib
         (add-to-list 'package-archives '("gnu" . (concat proto "://elpa.gnu.org/packages/")))))

     (package-initialize)
   #+END_SRC

   I prefer installing packages with [[https://github.com/jwiegley/use-package][use-package]] since it makes easier to organize code by grouping a package's installation with it's configuration.

   #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))
   #+END_SRC

   Always ensure all pacckages get installed.
   #+BEGIN_SRC emacs-lisp
     (setq use-package-always-ensure t)
   #+END_SRC

** Shell
   Setup ~exec-path~ so it reflects the global ~PATH~ env variable.

   #+BEGIN_SRC emacs-lisp
     (use-package exec-path-from-shell
       :config
       (exec-path-from-shell-initialize))
   #+END_SRC

   Make ~eshell~ to ignore case for autocompletion.

   #+BEGIN_SRC emacs-lisp
     (setq eshell-glob-case-insensitive t)
     (setq eshell-cmpl-ignore-case t)
   #+END_SRC

   Set keyboard shortcut for ~eshell~.
   #+BEGIN_SRC emacs-lisp
     (bind-key "C-c t" 'eshell)
   #+END_SRC

** Coding

   Setup [[http://company-mode.github.io/][company-mode]] for autocompletion.

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :config
       (global-company-mode))

     ;; TODO: configure company-flx
     (use-package company-flx)
   #+END_SRC

*** Javascript
    Install [[https://github.com/prettier/prettier-emacs][prettier-js]] to automatically format my ~js~ files.

    #+BEGIN_SRC emacs-lisp
      (use-package prettier-js)
    #+END_SRC

    Provide syntax highlighting for ~jest~ snapshots.
    #+BEGIN_SRC emacs-lisp
      (use-package web-mode
        :config
        (add-to-list 'auto-mode-alist '("\\.snap$" . web-mode)))
    #+END_SRC


*** Go
    Setup [[https://github.com/dominikh/go-mode.el][go-mode]].
    #+BEGIN_SRC emacs-lisp
      (use-package go-mode)
    #+END_SRC

** Window management
   I use [[https://github.com/abo-abo/ace-window][ace-window]] to easily jump between opened windows.

   #+BEGIN_SRC emacs-lisp
     (use-package ace-window
       :bind (("C-c j" . ace-window)
              ("C-c k" . ace-delete-window))
       :config
       (setq aw-keys '(?u ?i ?o ?j ?k ?l ?m ?, ?.)))
   #+END_SRC

   Use [[https://github.com/wasamasa/eyebrowse][eyebrowse]] to manage multiple window spaces.

   #+BEGIN_SRC emacs-lisp
     (use-package eyebrowse
       :config
       (eyebrowse-mode t))
   #+END_SRC

** Version Control
   Install [[https://magit.vc/][magit]] and make it so it always opens in the same window instead of opennig a new one.
   #+BEGIN_SRC emacs-lisp
     (use-package magit
       :bind (("C-c g" . magit-status))
       :config
       (setq magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
   #+END_SRC

   Configure [[https://github.com/nonsequitur/git-gutter-fringe-plus][git-gutter-fringe+]] to display simple shapes to indicate file changes.

   #+BEGIN_SRC emacs-lisp
     (use-package git-gutter-fringe+
       :config
       (global-git-gutter+-mode)
       (setq-default fringes-outside-margins t)
       (fringe-helper-define 'git-gutter-fr+-added nil
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX.....")
       (fringe-helper-define 'git-gutter-fr+-modified nil
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         "XXX....."
         )
       (fringe-helper-define 'git-gutter-fr+-deleted nil
         "........"
         "........"
         "........"
         "........"
         "........"
         "........"
         "........"
         "........"
         "........"
         "........"
         "........"
         "........"
         "........"
         "X......."
         "XX......"
         "XXX....."
         "XXXX...."))
   #+END_SRC

** Project management
   I use [[https://github.com/bbatsov/projectile][projectile]] to manage my projects. Next code block installs it and configure it to always have a list of the recent files I edited.

   #+BEGIN_SRC emacs-lisp
     (use-package projectile
       :config
       (setq projectile-enable-caching t)
       (projectile-global-mode)
       (recentf-mode 1))
   #+END_SRC

   Just to have a nicer interface I prefer te use helm-projectile.

   #+BEGIN_SRC emacs-lisp
     (use-package helm-projectile
       :bind (("C-c p" . helm-projectile-switch-project)
       ("C-c o" . helm-projectile-find-file)
       ("C-c F" . projectile-ag)
       ("M-x" . helm-M-x)
       ("C-c f" . helm-find-files)
       ("C-<tab>" . helm-buffers-list)))
   #+END_SRC

   In order to perform quick text searches in a project I'm using [[https://github.com/Wilfred/ag.el][ag]] as a frontend for [[https://github.com/ggreer/the_silver_searcher][The Silver Searcher]]. Projectile already has a function ~projectile-ag~ that uses this package to perform text searches in a project.

   #+BEGIN_SRC emacs-lisp
     (use-package ag)

     (use-package winnow
       :config
       (add-hook 'ag-mode-hook 'winnow-mode))
   #+END_SRC

** Org
   Install [[https://github.com/sabof/org-bullets][org-bullets]] in order to have a fancier org experience.
   #+BEGIN_SRC emacs-lisp
     (use-package org-bullets
       :config
       (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))
   #+END_SRC

  [[./img/screenshot2.png]]

  Org agenda configuration.
  #+BEGIN_SRC emacs-lisp
     (bind-key "C-c a" 'org-agenda)
  #+END_SRC

  Install org-journal

  #+BEGIN_SRC emacs-lisp
    (use-package org-journal
      :config
      (setq org-journal-dir "~/Dropbox/journal"))
  #+END_SRC

** Appearance
*** Theme
    I'm using [[https://github.com/hlissner/emacs-doom-themes/tree/screenshots#doom-one][doom-one]] as theme.
    #+BEGIN_SRC emacs-lisp
      (use-package doom-themes
        :config
        (load-theme 'doom-one))
    #+END_SRC
*** Font
    My font is [[https://github.com/adobe-fonts/source-code-pro][source-code-pro]].
    #+BEGIN_SRC emacs-lisp
      (set-face-attribute 'default nil :height 130)
      (set-frame-font "Source Code Pro")
    #+END_SRC
*** Extra tweaks
    Make the ~title-bar~ blank.
   #+BEGIN_SRC emacs-lisp
     (setq frame-title-format "")
   #+END_SRC

   Use [[http://elpa.gnu.org/packages/nlinum.html][nlinum]] to highlight current line.
   #+BEGIN_SRC emacs-lisp
   #+END_SRC

** Mac OS Specific
   #+BEGIN_SRC emacs-lisp
     (setq is-mac (equal system-type 'darwin))

     (when is-mac
       ;; Maximize frame
       (add-hook 'emacs-startup-hook 'toggle-frame-maximized)
       ;; Set option to nil to enable extrange chars
       (setq mac-option-modifier nil)
       ;; Use control from Meta
       (setq ns-command-modifier (quote meta))
       ;; Set right option to control
       (setq mac-right-option-modifier 'control))
   #+END_SRC

** Keyboard Shortcuts

   #+BEGIN_SRC emacs-lisp :results table :tangle no :exports results
     ;; Execute this code block by C-c C-c in order to update the shourtcuts table
     (mapcar (lambda (row) (list (car row) (car (cdr row)))) personal-keybindings)
   #+END_SRC

   #+RESULTS:
   | (C-c ,)   | self/open-config-file          |
   | (C-c e)   | er/expand-region               |
   | (C-c d)   | dired-jump                     |
   | (C-c s)   | avy-goto-word-1                |
   | (M-9)     | self/toggle-spec-file          |
   | (C-c a)   | org-agenda                     |
   | (C-<tab>) | helm-buffers-list              |
   | (C-c f)   | helm-find-files                |
   | (M-x)     | helm-M-x                       |
   | (C-c F)   | projectile-ag                  |
   | (C-c o)   | helm-projectile-find-file      |
   | (C-c p)   | helm-projectile-switch-project |
   | (C-c g)   | magit-status                   |
   | (C-c k)   | ace-delete-window              |
   | (C-c j)   | ace-window                     |
   | (C-c t)   | eshell                         |
